# -*- coding: utf-8 -*-
"""K_means_customers

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16_EIJCLj1hzaVtGgZq5nOFG-e2TY4EKm
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

df = pd.read_csv("/content/Mall_Customers.csv")
df.head()

df.isnull().sum()

display("duplicated:",df.duplicated().sum())

X= df.iloc[:, [3,4]].values

from sklearn.cluster import KMeans

wcss = []

for i in range(1,11):
    km = KMeans(n_clusters=i)
    km.fit_predict(X)
    wcss.append(km.inertia_)

import matplotlib.pyplot as plt
plt.plot(range(1,11),wcss)

km = KMeans(n_clusters=5)
y_means = km.fit_predict(X)

plt.scatter(X[y_means == 0,0],X[y_means == 0,1],color='blue')
plt.scatter(X[y_means == 1,0],X[y_means == 1,1],color='red')
plt.scatter(X[y_means == 2,0],X[y_means == 2,1],color='green')
plt.scatter(X[y_means == 3,0],X[y_means == 3,1],color='yellow')
plt.scatter(X[y_means == 4,0],X[y_means == 4,1],color='black')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.show()

df["Target"]=y_means

Clustered_df = df
Clustered_df.head()

X=Clustered_df.iloc[:,1:5]
y=Clustered_df.iloc[:,-1]

X.head()

y.head()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score

le=LabelEncoder()
X['Gender'] = le.fit_transform(X['Gender'])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

gbdt = GradientBoostingClassifier(n_estimators=50,random_state=2)

gbdt.fit(X_train,y_train)
y_pred=gbdt.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
accuracy

y_pred=gbdt.predict(X_test)
y_pred

prediction = pd.DataFrame({'Original Value': y_test, 'Predicted Value': y_pred})

# Print the DataFrame
display(prediction)